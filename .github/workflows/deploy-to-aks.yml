name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: booklistregistry2617
  RESOURCE_GROUP: booklist-k8s
  CLUSTER_NAME: booklist-aks
  NAMESPACE: booklist

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/BookListApi
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booklist-api:latest
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booklist-api:${{ github.sha }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/book-list-app
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booklist-frontend:latest
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booklist-frontend:${{ github.sha }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubeconfig
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secrets
        run: |
          kubectl delete secret booklist-secrets -n ${{ env.NAMESPACE }} --ignore-not-found
          kubectl create secret generic booklist-secrets \
            --from-literal=connection-string="${{ secrets.CONNECTION_STRING }}" \
            -n ${{ env.NAMESPACE }}

      - name: Deploy to AKS
        run: |
          # Update image tags in ConfigMap
          sed -i "s|booklistregistry2617.azurecr.io/booklist-api:latest|${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booklist-api:${{ github.sha }}|g" k8s/configmap.yaml
          sed -i "s|booklistregistry2617.azurecr.io/booklist-frontend:latest|${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/booklist-frontend:${{ github.sha }}|g" k8s/configmap.yaml
          
          # Apply all manifests
          kubectl apply -f k8s/ -n ${{ env.NAMESPACE }}
          
          # Wait for deployments
          kubectl rollout status deployment/booklist-api -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/booklist-frontend -n ${{ env.NAMESPACE }} --timeout=300s
          
          # Get service information
          kubectl get services -n ${{ env.NAMESPACE }}
          kubectl get ingress -n ${{ env.NAMESPACE }}